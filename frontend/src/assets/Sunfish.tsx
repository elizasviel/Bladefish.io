/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 Sunfish.glb --transform --types 
Files: Sunfish.glb [157.28KB] > /Users/normanqian/fractalcamp/gamesHackathon2/frontend/public/Sunfish-transformed.glb [48.44KB] (69%)
*/

import * as THREE from "three";
import React from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";

type ActionName =
  | "Fish_Armature|Attack"
  | "Fish_Armature|Death"
  | "Fish_Armature|Out_Of_Water"
  | "Fish_Armature|Swimming_Fast"
  | "Fish_Armature|Swimming_Impulse"
  | "Fish_Armature|Swimming_Normal";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Sunfish_1: THREE.SkinnedMesh;
    Sunfish_2: THREE.SkinnedMesh;
    Sunfish_3: THREE.SkinnedMesh;
    Main1: THREE.Bone;
  };
  materials: {
    Eyes: THREE.MeshStandardMaterial;
    SunFish_Main: THREE.MeshStandardMaterial;
    SunFish_Dark: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const group = React.useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF("/Sunfish-transformed.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="Fish_Armature" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
          <primitive object={nodes.Main1} />
        </group>
        <group name="Sunfish" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
          <skinnedMesh
            name="Sunfish_1"
            geometry={nodes.Sunfish_1.geometry}
            material={materials.Eyes}
            skeleton={nodes.Sunfish_1.skeleton}
          />
          <skinnedMesh
            name="Sunfish_2"
            geometry={nodes.Sunfish_2.geometry}
            material={materials.SunFish_Main}
            skeleton={nodes.Sunfish_2.skeleton}
          />
          <skinnedMesh
            name="Sunfish_3"
            geometry={nodes.Sunfish_3.geometry}
            material={materials.SunFish_Dark}
            skeleton={nodes.Sunfish_3.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/Sunfish-transformed.glb");
