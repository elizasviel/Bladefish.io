/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 Dolphin.glb --transform --types 
Files: Dolphin.glb [60.41KB] > /Users/normanqian/fractalcamp/gamesHackathon2/frontend/public/Fishes/Dolphin-transformed.glb [16.9KB] (72%)
*/

import * as THREE from "three";
import React from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";

type ActionName = "Armature|Swim";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Dolphin_1: THREE.SkinnedMesh;
    Dolphin_2: THREE.SkinnedMesh;
    Root: THREE.Bone;
  };
  materials: {
    Bottom: THREE.MeshStandardMaterial;
    Top: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const group = React.useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF("/Dolphin-transformed.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <primitive object={nodes.Root} />
        <group
          name="Dolphin"
          position={[0, 0.335, 0.369]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        >
          <skinnedMesh
            name="Dolphin_1"
            geometry={nodes.Dolphin_1.geometry}
            material={materials.Bottom}
            skeleton={nodes.Dolphin_1.skeleton}
          />
          <skinnedMesh
            name="Dolphin_2"
            geometry={nodes.Dolphin_2.geometry}
            material={materials.Top}
            skeleton={nodes.Dolphin_2.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/Dolphin-transformed.glb");
